<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAC96AAAvegAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv4NzAL+DcwC/g3MAv4NzAL+DcyO/g3N1v4Nzv8CD
        c+m3f2/7iGRZ/IBgVeuBYFXBgWFWd4NiViV5XFIAg2JWAIFhVgCOZ1sAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL+DcwC/g3MAv4NzAL+Dcw2/g3Nvv4Nz1r+D
        c/2/g3P/v4Nz/7d/b/+IZFn/f2BV/4BgVf+AYFX9gGBV2IFhVnGEYlcOgmFWAH5fVACMZ1sAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC/g3MAv4NzAL+DcwC/g3Mcv4NzqL+D
        c/2/g3P/v4Nz/7+Dc//Ag3P/uH9v/4hkWP+AYFX/gGBV/4BgVf+AYFX/gGBV/oFgVaqDYlYdgWFWAIBg
        VQCVbF8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL+DcwC/g3MAv4NzFr+D
        c7O/g3P/v4Nz/7+Dc/+/g3P/v4Nz/8CDcv+bjZH/dHh//4BfVP+AYFX/gGBV/4BgVf+AYFX/gGBV/4Fg
        VbWDYlcYgmFWAINiVwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC/g3MAv4NzAL+D
        cwS/g3ORv4Nz/7+Dc/+/g3P/v4Nz/8CDcv+/g3P/woJw/4OYrP9liJ7/gV5S/4BgVf+AYFT/gGBV/4Bg
        Vf+AYFX/gGBV/4FhVpOIZFkEhWNXAI5oXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL+D
        cwC/g3MAv4NzRb+Dc/G/g3P/wINy/6+Igv+El6r/s4d+/7mFeP+hjpD/bqHB/12Xuf9zdXr/fmRc/3to
        Y/9nh5z/eWto/4BfVP+AYFX/gGBV8oJhVkeBYFUAgmFWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAv4NzAL+DcwS/g3Omv4Nz/7+Dc//Ag3L/t4Z7/3act/9vnr7/cJ68/1iYvP9Xh6T/V4ek/1aW
        u/9flLP/XpW2/2GQrf98Zl//gGBU/4BgVf+AYFX/gWBVqIdkWQWFY1gAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAC/g3MAv4NzJb+Dc+S/g3P/v4Nz/7+Dc//BgnH/p4uK/1mkz/9Wf5f/XlRS/2BK
        Q/9gSkP/XlRS/1eAmP9Vos3/dnBy/4FfU/+AYFX/gGBV/4BgVf+AYFXlg2FWJ4JhVgAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAL+DcwC/g3NQv4Nz+7+Dc/+/g3P/wINy/8CDcv+Gl6n/Vomn/19N
        SP9nTkX/dFdO/3RXTv9nTkX/X01I/1aJp/9oh5v/gV9T/4BfVP+AYFX/gGBV/4BgVfuCYVZSgWBVAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv4NzAL+Dc26/g3P/v4Nz/72Edf+wiIH/qIuI/2ef
        wv9aaHP/ZEtB/3pcUf+BYVX/gWFV/3pcUf9kS0H/W2lz/1uZvf92b3H/empn/39hWP+AYFX/gGBV/4Fh
        VnB/YFUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC/g3MAv4NzeL+Dc//Ag3L/sYiA/3Ce
        vf9kosf/VqLO/1xeYv9nTkT/f19U/4BgVf+AYFX/f19U/2dORP9cXmP/VKHN/1qcwv9flLT/emlm/4Bf
        VP+AYFX/gmFWe35fVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL+DcwC/g3Ntv4Nz/7+D
        c/+9hHX/sod//6qKhv9on8L/Wml0/2NKQf96XFH/gWFV/4FhVf96XFH/Y0pB/1tpdP9bmLz/d25u/3pp
        Zf9/YVf/gGBV/4BgVf+BYVZvf2BVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv4NzAL+D
        c06/g3P6v4Nz/7+Dc//Ag3L/wINy/4iXqP9Wi6n/X05J/2dNRP9zV03/c1dN/2dNRP9fTkn/Voup/2mG
        mf+BX1P/gF9U/4BgVf+AYFX/gGBV+4JhVlGBYFUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAC/g3MAv4NzJL+Dc+K/g3P/v4Nz/7+Dc//BgnH/p4uK/1mk0P9WgZv/XlZV/2BLRP9gS0T/XlZV/1eC
        nP9Vos7/dnBy/4FfU/+AYFX/gGBV/4BgVf+AYFXkg2FWJoJhVgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAL+DcwC/g3MEv4Nzo7+Dc/+/g3P/wINy/7aGfP90nbn/cZ67/3Oduv9Zmb7/Voqo/1aK
        qP9Wl73/YJKx/1+Us/9gkrD/fGZg/4BgVP+AYFX/gGBV/4FgVaWIZVkEhWNYAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAv4NzAL+DcwC/g3NBv4Nz8L+Dc//Ag3L/sIiB/4eWp/+0h33/u4V3/6SN
        jf9woMD/XZa3/3Rzd/9+Y1r/fGdi/2iFmP95amj/gF9U/4BgVf+AYFXxgmFWQ4FgVQCDYVYAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC/g3MAv4NzAL+DcwO/g3OMv4Nz/7+Dc/+/g3P/v4Nz/8CD
        c/+/g3P/woJw/4OYrP9liJ7/gV5S/4BgVf+AYFT/gGBV/4BgVf+AYFX/gGBV/4FhVo+JZVkDhWNXAI9o
        XAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC/g3MAv4NzAL+DcxS/g3Ouv4Ny/7+D
        c/+/g3P/v4Nz/7+Dc//Ag3L/nIyP/3V2ff+AX1T/gGBV/4BgVf+AYFX/gGBV/4BfVP+BYFWwg2JXFYJh
        VgCEYlcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL+DcwC/g3MAv4NzAL+D
        cxm5jYO4voV2/7+Ccv+/g3P/v4Nz/7+Dc/+4f2//iGRY/4BgVf+AYFX/gGBV/4BfU/+AY1n/g25puoNi
        VhqCYVYAgGBVAJhtYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL+D
        cwD/DQAAtJWSAJTO8ZSjs8T/uI+H97+Dcvy/g3P/v4Nz/7d/b/+IZFn/f2BV/4BgVf+AYFT9g3Ft+Iqk
        t/+Py+6UhXh3AGQAAACOaFsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAJDU+wCN2f8AkNX8m5DV/P+Yx+WnwIFwXb+Dc6DAg3PHt39v2IhkWdmAYFXJgWBVo4Ff
        UmCOwd+okNX8/5DV/JuR3P8AkNT7AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAkNT7AJDU+wCQ1PubkNT7/4/V/ZKxnJwAwIJxAcCEcw23fm8Xi2ZaGINi
        Vw6RaFsChYOIAJDV/ZKQ1Pv/kNT7m5DU+wCQ1PsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQ1PsAkNT7AJDU+5uQ1Pv/kNT7k5DU+wC6jIMAwIRzALd+
        bwCLZloAhGJXAIhwaQCQ1PsAkNT7k5DU+/+Q1PubkNT7AJDU+wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJDU+wCQ1PsAkNT7m5DU+/+Q1PuTkNT7AJDU
        +wAAAAAAAAAAAAAAAAAAAAAAkNT7AJDU+wCQ1PuTkNT7/5DU+5uQ1PsAkNT7AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkNT7AJDU+wCQ1PubkNT7/5DU
        +5OQ1PsAkNT7AAAAAAAAAAAAAAAAAAAAAACQ1PsAkNT7AJDU+5OQ1Pv/kNT7m5DU+wCQ1PsAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQ1PsAkNT7AJDU
        +5qQ1Pv/kNT7k5DU+wCQ1PsAAAAAAAAAAAAAAAAAAAAAAJDU+wCQ1PsAkNT7k5DU+/+Q1PuakNT7AJDU
        +wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJDU
        +wCQ1PsAkNT7jpDU+/+Q1PunkNT7ApDU+wCQ1PsAAAAAAAAAAACQ1PsAkNT7AJDU+wKQ1PunkNT7/5DU
        +46Q1PsAkNT7AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAkNT7AJDU+wCQ1PtfkNT7/5DU++CQ1PsqkNT7AJDU+wCQ1PsAkNT7AJDU+wCQ1PsAkNT7KpDU
        ++CQ1Pv/kNT7X5DU+wCQ1PsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACQ1PsAkNT7AJDU+xyQ1PvTkNT7/5DU+7GQ1PsgkNT7AJDU+wCQ1PsAkNT7AJDU
        +yCQ1PuxkNT7/5DU+9OQ1PsckNT7AJDU+wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQ1PsAkNT7AJDU+1eQ1PvxkNT7/5DU+9GQ1Pt4kNT7SZDU
        +0mQ1Pt4kNT70ZDU+/+Q1PvxkNT7V5DU+wCQ1PsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJDU+wCQ1PsAkNT7ApDU+12Q1PvdkNT7/5DU
        +/+Q1Pv5kNT7+ZDU+/+Q1Pv/kNT73ZDU+12Q1PsCkNT7AJDU+wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJDU+wCQ1PsAkNT7AJDU
        +zCQ1PuXkNT73pDU+/uQ1Pv7kNT73pDU+5eQ1PswkNT7AJDU+wCQ1PsAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/gAAf/wAAD/4AAAf+AAAH/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AA
        AA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/4AAAf+AAAH/wAAD/+AAB//gAAf/4AAH/+A8B//gPAf/4D
        wH/+AYB//gAAf/4AAH//AAD//wAA//+AAf8=
</value>
  </data>
</root>